{"version":3,"sources":["utils/api.tsx","components/dataTable.tsx","views/homepage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","get","DataTable","useState","results","setRowState","useEffect","API","then","response","console","log","data","newUsers","map","id","login","uuid","Name","name","first","last","Cell","cell","Email","email","City","location","city","State","state","style","height","width","rows","columns","valueFormatter","params","value","field","headerName","pageSize","checkboxSelection","HomePage","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAEe,EACD,WACN,OAAOA,IAAMC,IAAK,kD,QC0BX,SAASC,IAEtB,MAA+BC,mBAAS,IAAxC,mBAAOC,EAAP,KAAgBC,EAAhB,KAwGA,OAxBAC,qBAAU,WACRC,IAAeC,MAAK,SAAAC,GAClBC,QAAQC,IAAIF,EAASG,KAAKR,SAE1B,IAAMS,EAAWJ,EAASG,KAAKR,QAAQU,KAAI,SAACD,GAE1C,MAAO,CACLE,GAAG,GAAD,OAAKF,EAASG,MAAMC,MACtBC,KAAK,GAAD,OAAKL,EAASM,KAAKC,MAAnB,YAA4BP,EAASM,KAAKE,MAC9CC,KAAK,GAAD,OAAKT,EAASU,MAClBC,MAAM,GAAD,OAAKX,EAASY,OACnBC,KAAK,GAAD,OAAKb,EAASc,SAASC,MAC3BC,MAAM,GAAD,OAAKhB,EAASc,SAASG,WAKhCzB,EAAYQ,QAEb,IAMD,qBAAKkB,MAAO,CAAEC,OAAQ,IAAKC,MAAO,QAAlC,SACE,cAAC,IAAD,CACAC,KAAM9B,EACN+B,QA1GwB,CAC1B,CACEC,eAAgB,SAACC,GAEhB,OADWA,EAAOC,OAGnBC,MAAO,KACPC,WAAY,KACZP,MAAO,KAET,CAQEM,MAAO,OACPC,WAAY,OACZP,MAAO,KAET,CACEG,eAAgB,SAACC,GAEf,OADaA,EAAOC,OAGtBC,MAAO,OACPC,WAAY,OACZP,MAAO,KAET,CACEG,eAAgB,SAACC,GAEf,OADcA,EAAOC,OAGvBC,MAAO,QACPC,WAAY,QACZP,MAAO,KAET,CACEG,eAAgB,SAACC,GAEf,OADaA,EAAOC,OAGtBC,MAAO,OACPC,WAAY,OACZP,MAAO,KAET,CACEG,eAAgB,SAACC,GAEf,OADiBA,EAAOC,OAG1BC,MAAO,QACPC,WAAY,QACZP,MAAO,MAmDPQ,SAAU,IACVC,mBAAiB,MChIRC,MAXf,WACI,OACI,gCAEF,oDACA,mHACA,cAACzC,EAAD,Q,OCQS0C,MAZf,WACE,OACE,qBAAKC,UAAU,MAAf,SAGC,cAAC,EAAD,OCIUC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBxC,MAAK,YAAkD,IAA/CyC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e5db9cd0.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default {\n    getUsers: function () {\n        return axios.get (\"https://randomuser.me/api/?results=100&nat=us\")\n        // return console.log(axios.get(\"https://randomuser.me/api/?results=200&nat=us\"))\n    }\n}\n\n","import React, { useState, useEffect } from 'react'\nimport { DataGrid, GridColDef, GridValueFormatterParams, GridValueGetterParams } from '@material-ui/data-grid';\nimport API from '../utils/api';\n\n// format date\n// get thumbnails to load \n\n// , ValueGetterParams \nconst columns: GridColDef[] = [\n  { field: 'id', headerName: 'ID', width: 70 },\n  { field: 'name', headerName: 'name', width: 130 },\n  { field: 'phone', headerName: 'phone', width: 160, },\n  { field: 'email', headerName: 'email', width: 130 },\n  { field: 'dob', headerName: 'dob', type: 'date', width: 130 }\n];\n\nconst rows = [\n  { id: 1, name: 'Jon Snow', phone: '603-831-2155', email: 'email@email.com', dob: '05-26-1993' },\n  { id: 2, name: 'Eric Powell', phone: '123-456-789', email: 'email@email.com', dob: '08-26-1998' },\n  { id: 3, name: 'Bonnie Powell', phone: '543-210-5648', email: 'email@email.com', dob: '05-27-1988' },\n  { id: 4, name: 'Jack Bauer', phone: '603-250-6548', email: 'email@email.com', dob: '05-26-1988' },\n  { id: 5, name: 'Toni Powell', phone: '603-856-1985', email: 'email@email.com', dob: '05-26-1933' },\n\n];\n\ninterface NameI {\n  first: string;\n  last: string;\n}\n\nexport default function DataTable() {\n  \n  const [results, setRowState] = useState([])\n\n  let columns: GridColDef[] = [\n    { \n      valueFormatter: (params: GridValueFormatterParams) => { \n       const id = params.value\n       return id\n      },\n      field: 'id', \n      headerName: 'id',\n      width: 130 \n    },\n    { \n      // valueFormatter: (params: GridValueFormatterParams) => { \n      //   console.log(params)\n      //   const name = params.value as NameI\n      //   // \"as InterfaceName\" casts the above\n        \n      //   return name.first + \" \" + name.last\n      // },\n      field: 'Name', \n      headerName: 'Name',\n      width: 150 \n    },\n    { \n      valueFormatter: (params: GridValueFormatterParams) => { \n        const cell = params.value \n        return cell\n      },\n      field: 'Cell', \n      headerName: 'Cell',\n      width: 150 \n    },\n    { \n      valueFormatter: (params: GridValueFormatterParams) => { \n        const email = params.value \n        return email\n      },\n      field: 'Email', \n      headerName: 'Email',\n      width: 250\n    },\n    { \n      valueFormatter: (params: GridValueFormatterParams) => { \n        const city = params.value \n        return city\n      },\n      field: 'City', \n      headerName: 'City',\n      width: 200 \n    },\n    { \n      valueFormatter: (params: GridValueFormatterParams) => { \n        const location = params.value \n        return location\n      },\n      field: 'State', \n      headerName: 'State',\n      width: 200 \n    },\n    // { \n    //   valueFormatter: (params: GridValueFormatterParams) => { \n    //     const dob = params.value \n    //     return dob\n    //   },\n    //   field: 'dob', \n    //   headerName: 'dob',\n    //   width: 200 \n    // },\n    // { \n    //   valueFormatter: (params: GridValueFormatterParams) => { \n    //     const picture = params.value \n    //     return picture\n    //   },\n    //   field: 'picture', \n    //   headerName: 'picture',\n    //   width: 120\n    // },\n  ]\n// interface = this thing i'm about to use, must have these properites\n  useEffect(() => {\n    API.getUsers().then(response => {\n      console.log(response.data.results);\n  \n      const newUsers = response.data.results.map((newUsers:any) => {\n   \n        return {\n          id: `${newUsers.login.uuid}`,\n          Name: `${newUsers.name.first} ${newUsers.name.last}`,\n          Cell: `${newUsers.cell}`,\n          Email: `${newUsers.email}`,\n          City: `${newUsers.location.city}`,\n          State: `${newUsers.location.state}`,\n          // dob: `${newUsers.dob.date}`,\n          // picture: `${newUsers.picture.thumbnail}`\n        }\n      })\n      setRowState(newUsers)\n    })\n  }, []);\n\n\n\n\n  return ( \n    <div style={{ height: 800, width: '100%' }}>\n      <DataGrid \n      rows={results} \n      columns={columns} \n      pageSize={100} \n      checkboxSelection />\n    </div>\n  );\n}\n\n\n","import React from 'react'\nimport DataTable from '../components/dataTable';\n\nfunction HomePage() {\n    return(\n        <div>\n          \n      <h1>Employee Directory</h1>\n      <h2>A simple employee directory using React, Axios, and the Random User Generator API</h2>\n      <DataTable />\n        </div>\n    )\n}\n\nexport default HomePage;","import React from 'react';\nimport HomePage from '../src/views/homepage'\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n   \n     {/* <p>Hello!</p> */}\n     <HomePage />\n    \n  \n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}